plugins {
    id 'com.android.application'
}

android {
    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration.androidCompileSdkVersion
    buildToolsVersion globalConfiguration.androidBuildToolsVersion

    defaultConfig {
        applicationId "com.shen.mvpmagic"
        minSdkVersion globalConfiguration.androidMinSdkVersion
        targetSdkVersion globalConfiguration.androidTargetSdkVersion
        versionCode globalConfiguration.versionCode
        versionName globalConfiguration.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    //签名信息
    signingConfigs {
        signApp {
            storeFile file('../mvpmagic.keystore')
            storePassword "123456"
            keyAlias "com.shen.mvpmagic"
            keyPassword "123456"
        }
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            signingConfig signingConfigs.signApp
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.signApp
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    //配置自定义打包名称
    applicationVariants.all { variant ->
        variant.outputs.all {
            def fileName
            if (variant.buildType.name.equals('release')) {
                fileName = "MvpMagic.apk"
            } else if (variant.buildType.name.equals('debug')) {
                fileName = "MvpMagic_debug.apk"
            }
            outputFileName = fileName;
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    compileOptions {
        sourceCompatibility globalConfiguration.javaVersion
        targetCompatibility globalConfiguration.javaVersion
    }

    dataBinding {
        enabled = true
    }

}

dependencies {

    implementation project(path: ':base')

}